type Query {
    paynlGetTransaction (
            pay_order_id: String! @doc(description: "The order id provided by Pay. This is not the same as the order id in Magento.")
    ): paynlGetTransactionOutput @resolver( class: "Paynl\\Graphql\\Model\\Resolver\\GetTransaction") @doc(description: "Get the status of the transaction")
}

type Mutation {
    paynlRefundTransaction (
            pay_order_id: String! @doc(description: "The order id provided by Pay. This is not the same as the order id in Magento.")
            amount: String @doc(description: "The amount you wish to refund.")
    ) : PaynlResultOutput @resolver( class: "Paynl\\Graphql\\Model\\Resolver\\RefundTransaction") @doc(description: "Initialize the refund.")

    paynlCaptureTransaction (
            pay_order_id: String! @doc(description: "The order id provided by Pay. This is not the same as the order id in Magento.")
            order_number: String! @doc(description: "The order number provided by Magento")
    ) : PaynlResultOutput @resolver( class: "Paynl\\Graphql\\Model\\Resolver\\CaptureTransaction") @doc(description: "Initialize the capture.")

    paynlVoidTransaction (
            pay_order_id: String! @doc(description: "The order id provided by Pay. This is not the same as the order id in Magento.")
    ) : PaynlResultOutput @resolver( class: "Paynl\\Graphql\\Model\\Resolver\\VoidTransaction") @doc(description: "Initialize the void.")

    paynlRestoreCart (
            cart_id: String! @doc(description: "The cart Id of the Magento order")
    ) : Boolean @resolver( class: "Paynl\\Graphql\\Model\\Resolver\\RestoreCart") @doc(description: "Restore the cart.")
}

type PaynlResultOutput {
    result   : Boolean @doc(description: "The result of the action")
    message  : String  @doc(description: "The message output from Pay.")
}

type paynlGetTransactionOutput {
    orderId  : String!  @doc(description: "The Pay order id")
    state  : Int  @doc(description: "The State number")
    stateName  : String  @doc(description: "The State name")
    amount  : amountArr  @doc(description: "Array containing the 'value' and 'currency'")
    amountOriginal  : amountArr @doc(description: "Array containing the 'value' and 'currency'")
    amountPaid  : amountArr @doc(description: "Array containing the 'value' and 'currency'")
    amountPaidOriginal  : amountArr @doc(description: "Array containing the 'value' and 'currency'")
    amountRefund  : amountArr  @doc(description: "Array containing the 'value' and 'currency'")
    amountRefundOriginal  : amountArr  @doc(description: "Array containing the 'value' and 'currency'")
    created  : String  @doc(description: "Created at date")
    orderNumber  : String  @doc(description: "The Order increment id for the Magento order")
    isSuccess  : Boolean  @doc(description: "Was the payment successfull")
}

type Cart {
    logo: String @resolver(class: "\\Paynl\\Graphql\\Model\\Resolver\\LogoForMethod") @doc(description: "Logo for the selected payment method")
    pay_issuers: [PayIssuer] @resolver(class: "\\Paynl\\Graphql\\Model\\Resolver\\IssuersForMethod") @doc(description: "Issuers available for the selected payment method")
}

type AvailablePaymentMethod {
    logo: String @resolver(class: "\\Paynl\\Graphql\\Model\\Resolver\\LogoForMethod") @doc(description: "Logo for the selected payment method")
    pay_issuers: [PayIssuer] @resolver(class: "\\Paynl\\Graphql\\Model\\Resolver\\IssuersForMethod") @doc(description: "Issuers available for the selected payment method")
}

type PaymentMethod {
    logo: String @resolver(class: "\\Paynl\\Graphql\\Model\\Resolver\\LogoForMethod") @doc(description: "Logo for the selected payment method")
    pay_issuers: [PayIssuer] @resolver(class: "\\Paynl\\Graphql\\Model\\Resolver\\IssuersForMethod") @doc(description: "Issuers available for the selected payment method")
}

type PayIssuer {
    id: String
    name: String
    visibleName: String
    logo: String
}

type amountArr {
    value  : String @doc(description: "The amount in cents")
    currency  : String @doc(description: "The currency used to pay")
}

type Order {
    pay_redirect_url: String @resolver(class: "\\Paynl\\Graphql\\Model\\Resolver\\PlaceOrderPay") @doc(description: "The URL to redirect to the Pay. checkout")
}

input PlaceOrderInput {
    pay_return_url: String @doc(description: "URL to send the customer to once the payment has finished.")
    pay_send_increment_id: Boolean @doc(description: "Send the increment_id with the pay_return_url")
}

input PaymentMethodInput {
    pay_issuer: String @doc(description: "Id of the issuer")
}